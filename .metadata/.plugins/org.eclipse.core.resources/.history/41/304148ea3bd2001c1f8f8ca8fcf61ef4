package com.lms.accesslibrary.bo;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.lms.accesslibrary.dao.BookItemRepository;
import com.lms.accesslibrary.entity.library.book.Book;
import com.lms.accesslibrary.entity.library.book.BookItem;
import com.lms.accesslibrary.entity.library.user.User;
import com.lms.accesslibrary.enums.BookItemStatus;
import com.lms.accesslibrary.enums.BookStatus;
import com.lms.accesslibrary.utility.DateFormatUtility;

@Component
public class BookItemBO {
	@Autowired
	BookItemRepository bookItemRepository;
	
	public BookItem findByBarcode(String barcode) {
		return bookItemRepository.findByTrackingNumber(barcode);
	};
	
	public List<BookItem> findByUserIdOrderByCreatedTSDesc(long id){
		List<BookItem> bookItems = bookItemRepository.findByUserIdOrderByCreatedTSDesc(id);		
		return bookItems;
	};
	
	public BookItem findByUserEmailOrderByCreatedTSDesc(String email){
		List<BookItem> bookItems = bookItemRepository.findByUserEmailOrderByCreatedTSDesc(email);		
		if(bookItems != null && bookItems.size() > 0) {
			return bookItems.get(0);
		}
		return null;
	};
	
	
	public boolean checkout(Book book,BookItem bookItem, long userId) {
	    if(book.getIsReferenceOnly().equals("1")) {
	      return false;
	    }	    
	    bookItem.setStatus(BookStatus.LOANED.name());
	    return true;
	  }

	public void save(BookItem bookItem) {
		bookItemRepository.save(bookItem);		
	}
	
	public BookItem loan(User librarian, User member, Book book, String bookItemStatus) {
		Set<BookItem> bookItems = book.getBookItems();
		/*Create a new Book Item*/
		BookItem bookItem = new BookItem();
		bookItem.setLibrarianId((int)librarian.getId());
		bookItem.setTrackingNumber(book.getBarcode());
		bookItem.setBorrowedDate(new Date());
		bookItem.setDueDate(DateFormatUtility.calculateDueDate());		
		if(BookItemStatus.RESERVEREQUEST.name().equals(bookItemStatus)) {
			bookItem.setActive(0);			
		}else {
			bookItem.setActive(1);
			book.setStatus(BookStatus.LOANED.name());
			member.setTotalNumBooksCheckedOut(member.getTotalNumBooksCheckedOut() + 1);
		}
		bookItem.setStatus(bookItemStatus);		
		bookItem.setUser(member);		
		bookItem.setBook(book);		
		bookItem.setCreatedTS(Timestamp.from(Instant.now()));
		bookItem.setUpdatedTS(Timestamp.from(Instant.now()));
		bookItems.add(bookItem);			
		
		this.save(bookItem);
		return bookItem;
	}
}
