package com.lms.accesslibrary.entity.library.user;

import java.time.LocalDate;
import java.util.Date;

import com.lms.accesslibrary.bo.BookLending;
import com.lms.accesslibrary.bo.BookReservation;
import com.lms.accesslibrary.bo.Fine;
import com.lms.accesslibrary.constant.Constants;
import com.lms.accesslibrary.entity.library.book.BookItem;
import com.lms.accesslibrary.enums.BookStatus;
import com.lms.accesslibrary.enums.ReservationStatus;
import com.lms.accesslibrary.utility.DateFormatUtility;

public class Member extends Account {

	private String memberId;
	private Date dateOfMembership;
	private int totalBooksCheckedout;

	public String getMemberId() {
		return memberId;
	}

	public void setMemberId(String memberId) {
		this.memberId = memberId;
	}

	public Date getDateOfMembership() {
		return dateOfMembership;
	}

	public void setDateOfMembership(Date dateOfMembership) {
		this.dateOfMembership = dateOfMembership;
	}

	public int getTotalBooksCheckedout() {
		return this.totalBooksCheckedout;
	}

	public void setTotalBooksCheckedout(int totalBooksCheckedout) {
		this.totalBooksCheckedout = totalBooksCheckedout;
	}

	public boolean reserveBookItem(BookItem bookItem) {
		return false;
	};

	private void incrementTotalBooksCheckedout() {

	}

	@Override
	public boolean resetPassword() {
		return false;
	};

	return true;
	}

	private void checkForFine(String bookItemBarcode) {
		BookLending bookLending = BookLending.fetchLendingDetails(bookItemBarcode);
		Date dueDate = bookLending.getDueDate();
		Date today = new Date();
		// check if the book has been returned within the due date
		if (today.compareTo(dueDate) > 0) {
			long diff = today.getTime() - dueDate.getTime();
			long diffDays = diff / (24 * 60 * 60 * 1000);
			Fine.collectFine(bookLending.getMemberId(), diffDays);
		}
	}

	public void returnBookItem(BookItem bookItem) {
		this.checkForFine(bookItem.getBarcode());
		BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());
		if (bookReservation != null) {
			// book item has a pending reservation
			bookItem.setStatus(BookStatus.RESERVED.name());
			bookReservation.sendBookAvailableNotification();
		}
		bookItem.setStatus(BookStatus.AVAILABLE.name());
	}

	public boolean renewBookItem(BookItem bookItem) {
		this.checkForFine(bookItem.getBarcode());
		BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());
		// check if this book item has a pending reservation from another member
		if (bookReservation != null && bookReservation.getMemberId() != this.getMemberId()) {
			System.out.println("This book is reserved by another member");
			this.decrementTotalBooksCheckedout();
			bookItem.setStatus(BookStatus.RESERVED.name());
			bookReservation.sendBookAvailableNotification();
			return false;
		} else if (bookReservation != null) {
			// book item has a pending reservation from this member
			bookReservation.setStatus(ReservationStatus.COMPLETED);
		}
		BookLending.lendBook(bookItem.getBarcode(), this.getMemberId());
		LocalDate localDate = LocalDate.now().plusDays(Constants.MAX_LENDING_DAYS);
	    bookItem.setDueDate(DateFormatUtility.convertToDateViaInstant(localDate));
	    
	    return true;
	}
	
	private void decrementTotalBooksCheckedout() {
		this.setTotalBooksCheckedout(this.getTotalBooksCheckedout() - 1);
	}

}
