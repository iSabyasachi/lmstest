package com.lms.accesslibrary.service;

import java.time.LocalDate;
import java.util.Date;

import javax.transaction.Transactional;

import org.springframework.stereotype.Service;

import com.lms.accesslibrary.bo.BookLending;
import com.lms.accesslibrary.bo.BookReservation;
import com.lms.accesslibrary.bo.Fine;
import com.lms.accesslibrary.constant.Constants;
import com.lms.accesslibrary.dao.BookItemRepository;
import com.lms.accesslibrary.dao.UserRepository;
import com.lms.accesslibrary.dto.Checkout;
import com.lms.accesslibrary.dto.CheckoutResponse;
import com.lms.accesslibrary.entity.library.book.BookItem;
import com.lms.accesslibrary.entity.library.user.Member;
import com.lms.accesslibrary.entity.library.user.User;
import com.lms.accesslibrary.enums.BookStatus;
import com.lms.accesslibrary.enums.ReservationStatus;
import com.lms.accesslibrary.utility.DateFormatUtility;

@Service
public class UserServiceImpl implements UserService {
	
	private UserRepository memberRepository;
	private BookItemRepository bookItemRepository;	
	
	
	String errCode = "";
	@Override
	public String checkoutBookItem(String userId, String bookItemBarcode) {
		
		User user = memberRepository.findByUserId(userId);
		BookItem bookItem = bookItemRepository.findByBarcode(bookItemBarcode);
		
		if (user.getBooks()!= null && user.getBooks().size() >= Constants.MAX_BOOKS_ISSUED_TO_A_USER) {
			errCode= "The user has already checked-out maximum number of books";
			return errCode;
		}
		BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());
		if (bookReservation != null && bookReservation.getUserId() != user.getId()) {
			// book item has a pending reservation from another user
			errCode = "This book is reserved by another member";
			return errCode;
		} else if (bookReservation != null) {
			// book item has a pending reservation from the give member, update it
			bookReservation.setStatus(ReservationStatus.COMPLETED);
		}

		if (!bookItem.checkout(user.getId())) {
			return "FAILED";
		}
		
		return "SUCCESS";
	}

	@Override
	public String returnBookItem(String userId, String bookItemBarcode) {		
		User user = memberRepository.findByUserId(userId);
		BookItem bookItem = bookItemRepository.findByBarcode(bookItemBarcode);
		
		this.checkForFine(bookItem.getBarcode());
		BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());
		if (bookReservation != null) {
			// book item has a pending reservation
			bookItem.setStatus(BookStatus.RESERVED.name());
			bookReservation.sendBookAvailableNotification();
		}
		bookItem.setStatus(BookStatus.AVAILABLE.name());
		user.getBooks().remove(bookItem);
		double fineAmount = this.checkForFine(bookItem.getBarcode());
		user.setTotalFine(fineAmount);		
		user.save();
		bookItem.save();
		return "SUCCESS";
	}
	private double checkForFine(String bookItemBarcode) {
		double fineAmount = 0.00;
		BookLending bookLending = BookLending.fetchLendingDetails(bookItemBarcode);
		Date dueDate = bookLending.getDueDate();
		Date today = new Date();
		// check if the book has been returned within the due date
		if (today.compareTo(dueDate) > 0) {
			long diff = today.getTime() - dueDate.getTime();
			long diffDays = diff / (24 * 60 * 60 * 1000);
			fineAmount = Fine.collectFine(bookLending.getUserId(), diffDays);
		}
		return fineAmount;
	}

	@Override
	public String renewBookItem(String userId, String bookItemBarcode) {
		User user = memberRepository.findByUserId(userId);
		BookItem bookItem = bookItemRepository.findByBarcode(bookItemBarcode);	
		
		BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());
		// check if this book item has a pending reservation from another member
		if (bookReservation != null && bookReservation.getUserId() != user.getId()) {
			errCode = "This book is reserved by another member";			
			user.getBooks().remove(bookItem);
			double fineAmount = this.checkForFine(bookItem.getBarcode());
			user.setTotalFine(fineAmount);
			user.save();			
			
			bookItem.setStatus(BookStatus.RESERVED.name());
			bookItem.save();
			bookReservation.sendBookAvailableNotification();
			return errCode;
		} else if (bookReservation != null) {
			// book item has a pending reservation from this member
			bookReservation.setStatus(ReservationStatus.COMPLETED);
		}
		BookLending.lendBook(bookItem.getBarcode(), user.getId());
		LocalDate localDate = LocalDate.now().plusDays(Constants.MAX_LENDING_DAYS);
	    bookItem.setDueDate(DateFormatUtility.convertToDateViaInstant(localDate));
	    
	    return "SUCCESS";
	}

	@Override
	public String payFine(String userId, String bookItemBarcode, double finePaid) {
		User user = memberRepository.findByUserId(userId);
		double totalFine = checkForFine(bookItemBarcode);
		if(totalFine != finePaid) {
			errCode = "Incorrect fine amount!!!";
			return errCode;
		}else {
			user.setTotalFine(0.00);
		}		
		return "SUCCESS";
	}

	@Override
	public String blockUser(String userId, String blockUserId) {
		
		return null;
	}
	

}
