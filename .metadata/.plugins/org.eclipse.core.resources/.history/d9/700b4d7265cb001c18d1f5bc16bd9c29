package com.lms.accesslibrary.entity.library.book;

import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.springframework.format.annotation.DateTimeFormat;

import com.lms.accesslibrary.bo.BookLending;
import com.lms.accesslibrary.entity.library.section.Rack;
import com.lms.accesslibrary.enums.BookStatus;

@Entity
@Table(name="bookitem")
public class BookItem extends Book {	
	
	private Long id;
    private String orderTrackingNumber;
	private String barcode;
	private boolean isReferenceOnly;
	private Date borrowed;
	private Date dueDate;
	private BigDecimal price;
	private String format;
	private String status;
	private Date dateOfPurchase;
	private Date publicationDate;
	private Rack placedAt;
	
	
	@Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name="id")
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	
	@Column(name="order_tracking_number")
	public String getOrderTrackingNumber() {
		return orderTrackingNumber;
	}
	public void setOrderTrackingNumber(String orderTrackingNumber) {
		this.orderTrackingNumber = orderTrackingNumber;
	}
	
	@Column(name="bar_code")
	public String getBarcode() {
		return barcode;
	}
	public void setBarcode(String barcode) {
		this.barcode = barcode;
	}
	
	@Column(name="is_reference_only")
	public boolean isReferenceOnly() {
		return isReferenceOnly;
	}
	public void setReferenceOnly(boolean isReferenceOnly) {
		this.isReferenceOnly = isReferenceOnly;
	}
	
	@Column(name = "date_borrowed")
    @DateTimeFormat
	public Date getBorrowed() {
		return borrowed;
	}
	public void setBorrowed(Date borrowed) {
		this.borrowed = borrowed;
	}
	
	@Column(name = "due_date")
    @DateTimeFormat
	public Date getDueDate() {
		return dueDate;
	}
	public void setDueDate(Date dueDate) {
		this.dueDate = dueDate;
	}
	
	@Column(name = "unit_price")
	public BigDecimal getPrice() {
		return price;
	}
	public void setPrice(BigDecimal price) {
		this.price = price;
	}
	
	@Column(name = "format")
	public String getFormat() {
		return format;
	}
	public void setFormat(String format) {
		this.format = format;
	}
	
	@Column(name = "status")
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	
	@Column(name = "purchase_date")
    @DateTimeFormat
	public Date getDateOfPurchase() {
		return dateOfPurchase;
	}
	public void setDateOfPurchase(Date dateOfPurchase) {
		this.dateOfPurchase = dateOfPurchase;
	}
	public Date getPublicationDate() {
		return publicationDate;
	}
	public void setPublicationDate(Date publicationDate) {
		this.publicationDate = publicationDate;
	}
	public Rack getPlacedAt() {
		return placedAt;
	}
	public void setPlacedAt(Rack placedAt) {
		this.placedAt = placedAt;
	}
	
	public boolean checkout(String memberId) {
	    if(this.isReferenceOnly()) {
	      System.out.println("This book is Reference only and can't be issued");
	      return false;
	    }
	    if(!BookLending.lendBook(this.getBarcode(), memberId)){
	      return false;
	    }
	    this.setStatus(BookStatus.LOANED);
	    return true;
	  }

}
